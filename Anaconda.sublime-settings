/*
    Anaconda default settings
*/
{
    /*
        Auto project switching

        If you set this to true, anaconda will detect project switches and
        will reconnect a new JsonServer with the switched project
        configuration
    */
    "auto_project_switch": true,

    /*
        Debug Mode:

        If you need to debug the jsonserver.py service for any reason, you
        can configure the following options to make the plugin to connect
        always to the same port in your local machine.

        Procedure:

            1. Set the debug_mode as true
            2. Set the debug_port to your desired port
            3. Close Sublime Text 3
            4. cd to your Packages/Anaconda directory
            5. start the jsonserver manually:
                python -B anaconda_server/jsonserver.py -p test 9999 DEBUG
            6. Start your Sublime Text 3 and

        Then your anaconda plugin will use the configured server and you will
        get debug messages in the terminal where you ran it
    */
    "jsonserver_debug": false,
    "jsonserver_debug_port": 9999,

    /*
        Default python interpreter.

        This can (an should) be overriden by project settings
    */
    "python_interpreter": "python",

    /*
        Set those aas true if you don't want Sublime Text regular completions
    */
    "suppress_word_completions": false,
    "suppress_explicit_completions": false,

    /*
        If complete_parameters is true, anaconda will add function and class
        parameters to its completions.

        If complete_all_parameters is true, it will add all the possible
        parameters, if it's false, it will add only required parameters
    */
    "complete_parameters": false,
    "complete_all_parameters": false,

    /*
        If you set the following option as true, anaconda will display the
        signatures of the methods you are using while typying
    */
    "display_signatures": false,

    /*
        The following set of options controls the pep8 autoformating behaviour

        The full list of errors that can be fixed are:

            E101 - Reindent all lines.
            E111 - Reindent all lines.
            E121 - Fix indentation to be a multiple of four.
            E122 - Add absent indentation for hanging indentation.
            E123 - Align closing bracket to match opening bracket.
            E124 - Align closing bracket to match visual indentation.
            E125 - Indent to distinguish line from next logical line.
            E126 - Fix over-indented hanging indentation.
            E127 - Fix visual indentation.
            E128 - Fix visual indentation.
            E129 - Indent to distinguish line from next logical line.
            E201 - Remove extraneous whitespace.
            E202 - Remove extraneous whitespace.
            E203 - Remove extraneous whitespace.
            E211 - Remove extraneous whitespace.
            E221 - Fix extraneous whitespace around keywords.
            E222 - Fix extraneous whitespace around keywords.
            E223 - Fix extraneous whitespace around keywords.
            E224 - Remove extraneous whitespace around operator.
            E225 - Fix missing whitespace around operator.
            E226 - Fix missing whitespace around operator.
            E227 - Fix missing whitespace around operator.
            E228 - Fix missing whitespace around operator.
            E231 - Add missing whitespace.
            E241 - Fix extraneous whitespace around keywords.
            E242 - Remove extraneous whitespace around operator.
            E251 - Remove whitespace around parameter '=' sign.
            E261 - Fix spacing after comment hash.
            E262 - Fix spacing after comment hash.
            E271 - Fix extraneous whitespace around keywords.
            E272 - Fix extraneous whitespace around keywords.
            E273 - Fix extraneous whitespace around keywords.
            E274 - Fix extraneous whitespace around keywords.
            E301 - Add missing blank line.
            E302 - Add missing 2 blank lines.
            E303 - Remove extra blank lines.
            E304 - Remove blank line following function decorator.
            E401 - Put imports on separate lines.
            E501 - Try to make lines fit within --max-line-length characters.
            E502 - Remove extraneous escape of newline.
            E701 - Put colon-separated compound statement on separate lines.
            E702 - Put semicolon-separated compound statement on separate lines.
            E703 - Put semicolon-separated compound statement on separate lines.
            E711 - Fix comparison with None.
            E712 - Fix comparison with boolean.
            W191 - Reindent all lines.
            W291 - Remove trailing whitespace.
            W293 - Remove trailing whitespace on blank line.
            W391 - Remove trailing blank lines.
            E26  - Format block comments.
            W6   - Fix various deprecated code (via lib2to3).
            W602 - Fix deprecated form of raising exception.
    */

    /*
        Autoformat files on save

        This option is disabled by default, AutoPEP8 is really slow and it get
        the file buffer read only while its working in the background.

        Use this at your risk
    */
    "auto_formatting": false,

    /*
        TImeout for the autoformatting tool before fail
        Note: Take into account that depending on the size of the file you
        want to autoformate, this can take a while
    */
    "auto_formatting_timeout": 1,  // seconds

    /*
        Enable unsafe changes:
            https://github.com/hhatto/autopep8#more-advanced-usage

        Set it as 0 if you are unsure here
    */
    "aggressive": 0,

    /*
        Do not fix the errors listed here:
    */
    "autoformat_ignore":
    [
    ],

    /*
        Fix only the errors listed here:
    */
    "autoformat_select":
    [
    ],

    /*
        Set the thresshold limit for McCabe complexity checker
    */
    "mccabe_threshold": 7,

    /*
        Set is a false to disable Anaconda Linting totally
    */
    "anaconda_linting": true,

    /*
        Sets the linting behaviour for anaconda:

        "always" - Linting works always even while you are writting (in the background)
        "load-save" - Linting works in file load and save only
        "save-only" - Linting works in file save only
    */
    "anaconda_linting_behaviour": "always",

    /*
        The minimum delay in seconds (fractional seconds are okay) before
        a linter is run when the "sublimelinter" setting is true. This allows
        you to have background linting active, but defer the actual linting
        until you are idle. When this value is greater than the built in linting delay,
        errors are erased when the file is modified, since the assumption is
        you don't want to see errors while you type.
    */
    "anaconda_linter_delay": 0.5,

    // If true, anaconda draws gutter marks on line with errors
    "anaconda_gutter_marks": true,

    /*

        If anaconda_gutter_marks is true, this determines what theme is used.
        Theme 'basic' only adds dots and circles to gutter.

        Other available themes are 'alpha', 'bright', 'dark', 'hard' and
        'simple'. To see icons that will be used for each theme check
        gutter_icon_themes folder in Anaconda package.
    */
    "anaconda_gutter_theme": "basic",

    /*
        If 'outline' (default) anaconda will outline error lines
        If 'fill' anconda will fill the lines
        If 'none' anaconda will not draw anything on error lines
    */
    "anaconda_linter_mark_style": "outline",

    /*
        If anaconda_linter_mark_style is set to none and this is set to false,
        anaconda will not underline errors

        If anaconda_linter_mark_style is set to anything else, this option is
        ignored
    */
    "anaconda_linter_underlines": true,

    /*
        Use PyLint instead of PyFlakes and PEP-8

        **** WARNING ****

        - If you set this value as true, PyFlakes and pep8 will not bet used
        - PyLint does *NOT* support lint buffers that are not already saved in
          the file system

        **** WARNING ****
    */
    "use_pylint": false,

    // Set this to false to turn pep8 checking off completely
    "pep8": true,

    /*
        If setted, the given file will be used as configuration for pep8

        **** WARNING ****

        - If this option is set to something different than false,
          pep8_ignore and pep8_max_line_length will be silently ignored

        **** WARNING ****
    */
    "pep8_rcfile": false,

    /*
        A list of pep8 error numbers to ignore.
        The list of error codes is in this file: https://github.com/jcrocholl/pep8/blob/master/pep8.py.
        Search for "Ennn:", where nnn is a 3-digit number.
    */
    "pep8_ignore":
    [
//
//        ERROR CODE          EXPLANATION
//
//        Uncomment the line to disable the error code.
//
//   E1                       Indentation
//        "E101", //          Indentation contains mixed spaces and tabs
//        "E111", //          Indentation is not a multiple of four
//        "E112", //          Expected an indented block
//        "E113", //          Unexpected indentation
//        "E114", //          Indentation is not a multiple of four (comment)
//        "E115", //          Expected an indented block (comment)
//        "E116", //          Unexpected indentation (comment)
//
//        "E121", //   (^)    Continuation line under-indented for hanging indent
//        "E122", //   (^)    Continuation line missing indentation or outdented
//        "E123", //   (*)    Closing bracket does not match indentation of opening bracketâ€™s line
//        "E124", //   (^)    Closing bracket does not match visual indentation
//        "E125", //   (^)    Continuation line with same indent as next logical line
//        "E126", //   (^)    Continuation line over-indented for hanging indent
//        "E127", //   (^)    Continuation line over-indented for visual indent
//        "E128", //   (^)    Continuation line under-indented for visual indent
//        "E129", //   (^)    Visually indented line with same indent as next logical line
//        "E131", //   (^)    Continuation line unaligned for hanging indent
//        "E133", //   (*)    Closing bracket is missing indentation
//
//   E2                       Whitespace
//        "E201", //          Whitespace after â€˜(â€˜
//        "E202", //          Whitespace before â€˜)â€™
//        "E203", //          Whitespace before â€˜:â€™
//
//        "E211", //          Whitespace before â€˜(â€˜
//
//        "E221", //          Multiple spaces before operator
//        "E222", //          Multiple spaces after operator
//        "E223", //          Tab before operator
//        "E224", //          Tab after operator
//        "E225", //          Missing whitespace around operator
//        "E226", //   (*)    Missing whitespace around arithmetic operator
//        "E227", //          Missing whitespace around bitwise or shift operator
//        "E228", //          Missing whitespace around modulo operator
//
//        "E231", //          Missing whitespace after â€˜,â€™
//
//        "E241", //   (*)    Multiple spaces after â€˜,â€™
//        "E242", //   (*)    Tab after â€˜,â€™
//
//        "E251", //          Unexpected spaces around keyword / parameter equals
//
//        "E261", //          At least two spaces before inline comment
//        "E262", //          Inline comment should start with â€˜# â€˜
//        "E265", //          Block comment should start with â€˜# â€˜
//        "E266", //          Too many leading â€˜#â€™ for block comment
//
//        "E271", //          Multiple spaces after keyword
//        "E272", //          Multiple spaces before keyword
//        "E273", //          Tab after keyword
//        "E274", //          Tab before keyword
//
//   E3                       Blank line
//        "E301", //          Expected 1 blank line, found 0
//        "E302", //          Expected 2 blank lines, found 0
//        "E303", //          Too many blank lines (3)
//        "E304", //          Blank lines found after function decorator
//
//   E4                       Import
//        "E401", //          Multiple imports on one line
//
//   E5                       Line length
//        "E501", //   (^)    Line too long (82 > 79 characters)
//        "E502", //          The backslash is redundant between brackets
//
//   E7                       Statement
//        "E701", //          Multiple statements on one line (colon)
//        "E702", //          Multiple statements on one line (semicolon)
//        "E703", //          Statement ends with a semicolon
//        "E704", //          Multiple statements on one line (def)
//        "E711", //   (^)    Comparison to None should be â€˜if cond is None:â€™
//        "E712", //   (^)    Comparison to True should be â€˜if cond is True:â€™ or â€˜if cond:â€™
//        "E713", //          Test for membership should be â€˜not inâ€™
//        "E714", //          Test for object identity should be â€˜is notâ€™
//        "E721", //          Do not compare types, use â€˜isinstance()â€™
//        "E731", //          Do not assign a lambda expression, use a def
//
//   E9                       Runtime
//        "E901", //          SyntaxError or IndentationError
//        "E902", //          IOError
//
//   W1                       Indentation warning
//        "W191", //          Indentation contains tabs
//
//   W2                       Whitespace warning
//        "W291", //          Trailing whitespace
//        "W292", //          no newline at end of file
//        "W293", //          Blank line contains whitespace
//
//   W3                       Blank line warning
//        "W391", //          Blank line at end of file
//
//   W6                       Deprecation warning
//        "W601", //          .has_key() is deprecated, use â€˜inâ€™
//        "W602", //          Deprecated form of raising exception
//        "W603", //          â€˜<>â€™ is deprecated, use â€˜!=â€™
//        "W604", //          Backticks are deprecated, use â€˜repr()â€™
//
//        (*) In the default configuration, the checks E123, E133, E226, E241 and E242 are ignored because they are not rules unanimously accepted, and PEP 8 does not enforce them.
//            The check E133 is mutually exclusive with check E123. Use switch --hang-closing to report E133 instead of E123.
//
//        (^) These checks can be disabled at the line level using the # noqa special comment. This possibility should be reserved for special cases.
//
    ],

    // Maximum line length for pep8
    "pep8_max_line_length": 79,

    // Set this to true to turn pep257 checking on
    "pep257": false,

    /*
        A list of pep257 error numbers to ignore.
        The list can be found here: https://github.com/GreenSteam/pep257/#error-codes
        D209 Multi-line docstring should end with 1 blank line is ignored by
        default as it has been deprecated.
    */
    "pep257_ignore":
    [
        "D209"
    ],

    /*
        You can ignore some of the "undefined name xxx"
        errors (comes in handy if you work with post-processors, globals/builtins available only at runtime, etc.).
        You can control what names will be ignored with the user setting "pyflakes_ignore".

        Example:

        "pyflakes_ignore":
            [
                "some_custom_builtin_o_mine",
                "A_GLOBAL_CONSTANT"
            ],
    */
    "pyflakes_ignore":
    [
    ],

    /*
        Now is possible to ignore specific error types adding them on this
        list, (just uncomment them)
    */
    "pyflakes_explicit_ignore":
    [
        // "Redefined",
        // "UnusedImport",
        // "UndefinedName",
        // "UndefinedLocal",
        // "UnusedVariable,",
        // "UndefinedExport",
        // "DuplicateArgument",
        // "RedefinedWhileUnused"
    ],

    /*
        If setted, the given file will be used as configuration for PyLint

        **** WARNING ****

            - If this option is set to something different than false,
              pylint_ignore will be silently ignored

            **** WARNING ****
    */
    "pylint_rcfile": false,

    /*
        You can ignore specific PyLint error codes using this configuration.
        We strongly suggest that you better configure your pylintrc file to
        determine which type of error is important to you
    */
    "pylint_ignore":
    [
        // "0201"
    ],

    /*
        Ordinarily pyflakes will issue a warning when 'from foo import *' is used,
        but it is ignored since the warning is not that helpful. If you want to see this warning,
        set this option to false.
    */
    "pyflakes_ignore_import_*": true,

    /*
        Debug and development options

        Use those options only for debugging and devleopment purposes, them can
        and will slowdown your Sublime Text

        anconda_debug can be set as: false or profiler

        If this is set as profiler, Aanconda will run a profiler on autocompelte
        and print it results in the Sublime Text console.

        NOTE: cProfile can't be imported in all the platforms, at least no in
        Linux, this is an already reported bug:

            http://www.sublimetext.com/forum/viewtopic.php?f=3&t=13698
            https://github.com/SublimeText/Issues/issues/127

    */
    "anaconda_debug": false
}
